// datasource et generator à adapter à votre projet
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRoleEnum {
  ADMIN
  SCOUT
  COACH
  RECRUITER
  VIEWER
  AGENT
}

enum Visibility {
  PRIVATE
  TEAM
  ORG
  PUBLIC
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  ARCHIVED
}

enum ReviewDecision {
  PENDING
  APPROVED
  REJECTED
}

enum Footed {
  LEFT
  RIGHT
  BOTH
}

enum PositionGroup {
  GK
  DF
  MF
  FW
}

enum ReactionType {
  LIKE
  USEFUL
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  teams     Team[]
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  username               String                  @unique
  hashedPass             String
  displayName            String
  avatarUrl              String?
  orgId                  String?
  emailVerified          DateTime?
  emailVerificationToken String?                 @unique
  emailVerification      EmailVerificationToken?
  organization           Organization?           @relation(fields: [orgId], references: [id])
  roles                  UserRole[]
  bio                    String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  disabledAt             DateTime?
  comments               Comment[]
  reactions              Reaction[]
  follows                Follow[]                @relation("user_follows")
  followers              Follow[]                @relation("user_followers")
  notifications          Notification[]
  reports                Report[]                @relation("report_author")
  auditLogs              AuditLog[]              @relation("audit_logs")
  addedTags              PlayerTag[]             @relation("player_tags")
  reviews                ReportReview[]          @relation("report_reviews")
  mediaAssets            MediaAsset[]            @relation("media_assets")
  reportVersions         ReportVersion[]         @relation("report_versions")

  @@index([orgId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
}

model Role {
  id    String       @id @default(cuid())
  name  UserRoleEnum @unique
  users UserRole[]
}

model UserRole {
  userId     String
  roleId     String
  user       User     @relation(fields: [userId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now())

  @@id([userId, roleId])
  @@index([roleId])
}

model Nationality {
  code    String   @id
  name    String
  players Player[]
  teams   Team[]
}

model Team {
  id              String        @id @default(cuid())
  name            String
  shortName       String?
  country         String?
  nationalityCode String?
  nationality     Nationality?  @relation(fields: [nationalityCode], references: [code])
  orgId           String?
  organization    Organization? @relation(fields: [orgId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  players         Contract[]
  homeStadiumId   String?
  homeStadium     Stadium?      @relation("team_stadium", fields: [homeStadiumId], references: [id])
  homeMatches     Match[]       @relation("home_team")
  awayMatches     Match[]       @relation("away_team")
  lineups         Lineup[]
  appearances     Appearance[]
  events          MatchEvent[]  @relation("team_events")
  currentPlayers  Player[]      @relation("current_team")

  @@index([orgId])
}

model Player {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  birthDate       DateTime?
  heightCm        Int?
  weightKg        Int?
  footed          Footed?
  primaryPosition PositionGroup?
  positions       String[]
  nationalityCode String?
  nationality     Nationality?   @relation(fields: [nationalityCode], references: [code])
  currentTeamId   String?
  currentTeam     Team?          @relation("current_team", fields: [currentTeamId], references: [id])
  externalIds     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  contracts       Contract[]
  appearances     Appearance[]
  reports         Report[]
  media           MediaAsset[]   @relation("player_media")
  tags            PlayerTag[]
  events          MatchEvent[]   @relation("player_events")
  followers       Follow[]       @relation("player_followers")

  @@index([lastName, firstName])
  @@index([currentTeamId])
}

model PlayerTag {
  id        String   @id @default(cuid())
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  tag       Tag      @relation("tag_players", fields: [tagId], references: [id])
  tagId     String
  addedById String?
  addedBy   User?    @relation("player_tags", fields: [addedById], references: [id])
  createdAt DateTime @default(now())

  @@unique([playerId, tagId])
  @@index([tagId])
}

model Contract {
  id          String    @id @default(cuid())
  playerId    String
  teamId      String
  startDate   DateTime
  endDate     DateTime?
  shirtNumber Int?
  player      Player    @relation(fields: [playerId], references: [id])
  team        Team      @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([playerId, teamId])
}

model Stadium {
  id        String   @id @default(cuid())
  name      String
  city      String?
  country   String?
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matches   Match[]
  teams     Team[]   @relation("team_stadium")
}

model Competition {
  id        String   @id @default(cuid())
  name      String
  country   String?
  level     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seasons   Season[]

  @@unique([name, country])
}

model Season {
  id            String      @id @default(cuid())
  competitionId String
  name          String
  startDate     DateTime
  endDate       DateTime
  competition   Competition @relation(fields: [competitionId], references: [id])
  matches       Match[]

  @@unique([competitionId, name])
  @@index([startDate, endDate])
}

model Match {
  id          String       @id @default(cuid())
  seasonId    String
  date        DateTime
  round       String?
  homeTeamId  String
  awayTeamId  String
  stadiumId   String?
  homeGoals   Int?
  awayGoals   Int?
  status      String?
  season      Season       @relation(fields: [seasonId], references: [id])
  homeTeam    Team         @relation("home_team", fields: [homeTeamId], references: [id])
  awayTeam    Team         @relation("away_team", fields: [awayTeamId], references: [id])
  stadium     Stadium?     @relation(fields: [stadiumId], references: [id])
  lineups     Lineup[]
  appearances Appearance[]
  events      MatchEvent[]
  reports     Report[]
  media       MediaAsset[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([seasonId, date])
  @@index([homeTeamId, awayTeamId])
}

model Lineup {
  id        String  @id @default(cuid())
  matchId   String
  teamId    String
  formation String?
  coach     String?
  match     Match   @relation(fields: [matchId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])

  @@unique([matchId, teamId])
}

model Appearance {
  id        String  @id @default(cuid())
  matchId   String
  playerId  String
  teamId    String
  minuteIn  Int?
  minuteOut Int?
  position  String?
  rating    Float?
  isStarter Boolean @default(false)
  match     Match   @relation(fields: [matchId], references: [id])
  player    Player  @relation(fields: [playerId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])

  @@unique([matchId, playerId])
  @@index([teamId])
}

model MatchEvent {
  id       String  @id @default(cuid())
  matchId  String
  minute   Int
  type     String
  playerId String?
  teamId   String?
  meta     Json?
  match    Match   @relation(fields: [matchId], references: [id])
  player   Player? @relation("player_events", fields: [playerId], references: [id])
  team     Team?   @relation("team_events", fields: [teamId], references: [id])

  @@index([matchId, minute])
  @@index([playerId])
}

model Tag {
  id         String      @id @default(cuid())
  label      String
  color      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  reports    ReportTag[]
  playerTags PlayerTag[] @relation("tag_players")

  @@unique([label])
}

model Report {
  id          String              @id @default(cuid())
  authorId    String
  playerId    String
  matchId     String?
  matchDate   DateTime?
  visibility  Visibility          @default(PRIVATE)
  status      ReportStatus        @default(DRAFT)
  title       String?
  summary     String?
  strengths   String?
  weaknesses  String?
  potential   String?
  overall     Float?
  metrics     ReportMetricValue[]
  media       MediaAsset[]
  tags        ReportTag[]
  approvals   ReportReview[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  submittedAt DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  deletedAt   DateTime?
  author      User                @relation("report_author", fields: [authorId], references: [id])
  player      Player              @relation(fields: [playerId], references: [id])
  match       Match?              @relation(fields: [matchId], references: [id])
  versions    ReportVersion[]
  comments    Comment[]
  reactions   Reaction[]          @relation("report_reactions")

  @@index([playerId])
  @@index([matchId])
  @@index([authorId])
  @@index([status, visibility])
}

model ReportReview {
  id         String         @id @default(cuid())
  reportId   String
  reviewerId String
  decision   ReviewDecision @default(PENDING)
  note       String?
  decidedAt  DateTime?
  report     Report         @relation(fields: [reportId], references: [id])
  reviewer   User           @relation("report_reviews", fields: [reviewerId], references: [id])

  @@unique([reportId, reviewerId])
  @@index([reviewerId])
}

model ReportMetric {
  id        String              @id @default(cuid())
  key       String              @unique
  label     String
  group     String?
  scaleMin  Int                 @default(1)
  scaleMax  Int                 @default(10)
  weight    Float               @default(1)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  values    ReportMetricValue[]
}

model ReportMetricValue {
  id            String       @id @default(cuid())
  reportId      String
  metricId      String
  value         Int
  justification String?
  report        Report       @relation(fields: [reportId], references: [id])
  metric        ReportMetric @relation(fields: [metricId], references: [id])

  @@unique([reportId, metricId])
  @@index([metricId])
}

model ReportTag {
  reportId String
  tagId    String
  report   Report @relation(fields: [reportId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([reportId, tagId])
}

model MediaAsset {
  id          String   @id @default(cuid())
  url         String
  kind        String
  provider    String?
  title       String?
  description String?
  playerId    String?
  matchId     String?
  reportId    String?
  player      Player?  @relation("player_media", fields: [playerId], references: [id])
  match       Match?   @relation(fields: [matchId], references: [id])
  report      Report?  @relation(fields: [reportId], references: [id])
  createdById String?
  createdBy   User?    @relation("media_assets", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())

  @@index([playerId, matchId, reportId])
}

model Comment {
  id        String     @id @default(cuid())
  authorId  String
  reportId  String
  body      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  author    User       @relation(fields: [authorId], references: [id])
  report    Report     @relation(fields: [reportId], references: [id])
  reactions Reaction[] @relation("comment_reactions")

  @@index([reportId, createdAt])
}

model Reaction {
  id        String       @id @default(cuid())
  userId    String
  type      ReactionType
  reportId  String?
  commentId String?
  user      User         @relation(fields: [userId], references: [id])
  report    Report?      @relation("report_reactions", fields: [reportId], references: [id])
  comment   Comment?     @relation("comment_reactions", fields: [commentId], references: [id])
  createdAt DateTime     @default(now())

  @@unique([userId, type, reportId, commentId])
  @@index([reportId])
  @@index([commentId])
}

model Follow {
  id                String   @id @default(cuid())
  followerId        String
  followingUserId   String?
  followingPlayerId String?
  follower          User     @relation("user_follows", fields: [followerId], references: [id])
  followingUser     User?    @relation("user_followers", fields: [followingUserId], references: [id])
  followingPlayer   Player?  @relation("player_followers", fields: [followingPlayerId], references: [id])
  createdAt         DateTime @default(now())

  @@unique([followerId, followingUserId, followingPlayerId])
  @@index([followingUserId])
  @@index([followingPlayerId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  data      Json
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model ReportVersion {
  id          String   @id @default(cuid())
  reportId    String
  version     Int
  snapshot    Json
  createdById String
  createdAt   DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id])
  createdBy   User     @relation("report_versions", fields: [createdById], references: [id])

  @@unique([reportId, version])
  @@index([createdById])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  entity    String
  entityId  String
  action    String
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  actor     User?    @relation("audit_logs", fields: [actorId], references: [id])

  @@index([entity, entityId, createdAt])
}
